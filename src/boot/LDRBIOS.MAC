           title 'LDRBIOS for CP/M 3 CPMLDR'
;
; Loader BIOS for Cirtech CPM system.
;
; Created via decompiling by Peter Ibbotson Oct 2023
; (C) Copyright Cirtech 1985
;

           .z80
;
;6502 Zero page stuff seen from Z80
;
ACC_6502   EQU 0F045H ; 6502 Acc
X_6502     EQU 0F046H ; 6502 X reg
Y_6502     EQU 0F047H ; 6502 Y reg
FLAG_6502  EQU 0F048H ; 6502 flag
;
;6502 stuff in $300 range as seen from Z80
;
ROUT_6502  EQU 0F3D0H ; 6502 routine to call
CARD_Z80   EQU 0F3DEH ; Card address from Z80 0E401H
DISK_TRKL  EQU 0F380H ; Disk track low
DISK_SECT  EQU 0F381H ; Disk sector
DISK_DRV   EQU 0F384H ; Disk drive slot ($60
DISK_ACTD  EQU 0F385H ; Disk active drive
DISK_TRKH  EQU 0F386H ; Disk track high
DISK_OP    EQU 0F388H ; Disk operation
DISK_ERR   EQU 0F389H ; Disk Result
DISK_ROUT  EQU 003DCH ; Disk routine to call
           cseg

           org 0
           JP boot       ; initial entry point on coldstart
           JP boot       ; warm start
           ld a,00H
           ret
           ld a,00H
           ret
           JP conout     ; send console output charcater
           ld a,00H
           ret
           ld a,00H
           ret
           ld a,00H
           ret
           JP home       ; set disks to logical home
           JP seldsk     ; select disk drive, return disk parameter info
           JP settrk     ; set disk track
           JP setsec     ; set disk sector
           JP setdma     ; set disk I/O memory address
           JP read       ; read phisical block(s)
           ld a,00H
           ret
           ld a,00H
           ret
           JP sectran     ; translate logical to physical sector
           ld a,00H
           ret
           ld a,00H
           ret
           ld a,00H
           ret
           ld a,00H
           ret
           ld a,00H
           ret
           ld a,00H
           ret
           ld a,00H
           ret
           ld a,00H
           ret
           JP move       ; block move memory to memory
           ld a,00H
           ret
           ld a,00H
           ret
           ld a,00H
           ret
;==================================================================
; BIOS Func 0 - BOOT
; Perform cold boot stuff.
; Entry
; Exit
;==================================================================
boot:      ret
           ORG 498H
;==================================================================
; Call 6502 helper routine
; Entry
; HL=address to call
; Exit
;==================================================================
call6502:  ld   a,04H          ;Set 6502 flags
           ld   (FLAG_6502),a  ;Just Interrupts disabled
           ld   (ROUT_6502),hl ;Set our destination
           ld   hl,(CARD_Z80)  ;Bounce off to
           ld   (hl),a         ;6502 land
           ret
; Looks like 6502 code at 2FA8
           DB   0ADH,088H,0C0H ;LDA $C088 ?
           DB   020H,000H,000H ;JSR $0000
; Possibly back to Z80 code
           add hl,bc           ;01FAB?
           xor a
           cpl
           ld h,b
           inc b
           ld bc,0
           nop
           nop
           nop
           nop
           nop
;==================================================================
; BIOS Func 5 - CONOUT
; Write character in to screen.
; Entry
; C = Character to write
;==================================================================
conout:    ld   a,c            ;character to output
           ld   (ACC_6502),a
           ld   a,(0E30FH)     ;80 column card out
           ld   hl,0C330H      ;Set X=$30
           ld   (0F046H),hl    ;Set Y=$C3
           ld   l,a            ;HL=$C3XX
           jr   call6502
;==================================================================
; BIOS Func 16 - SECTRAN
; Translate sector
; Entry
; BC = Logical sector number
; DE = Address of translation table
; Exit
; HL = Physical sector number
;==================================================================
sectran:   ld   h,b            ;Copy BC to HL as we don't translate
           ld   l,c
           ret
;==================================================================
; BIOS Func 9 - SELDSK
; Select the disc drive in register C
; Entry
; C = Drive 0=A, 1=B....
; E = 0 or FFFFH, if Bit 0 is 1 disc has been logged before
;                 if Bit 0 is 0 disc is logged as if new
;                 can cause a disc read to figure out DPH from
;                 boot sector.
; Exit
; HL = Disk parameter Header
;==================================================================
seldsk:    ld   a,(5E20H)      ;presumably boot drive
           ld   (DISK_DRV),a   ;save it for our caller
           ld   hl,6EA8H       ;return back boot DPH
           ret
;==================================================================
; BIOS Func 8 - HOME
; Move the current to track 0
; Entry
; Exit
;==================================================================
home:      ld   bc,0           ;Set track to zero fall thru
;==================================================================
; BIOS Func 10 - SETTRK
; Set the track
; Entry
; BC = Track to set
; Exit
;==================================================================
settrk:    ld   a,c
           ld   (DISK_TRKL),a
           ld   a,b
           ld   (DISK_TRKH),a
           ret
;==================================================================
; BIOS Func 12 - SETDMA
; Set the address next disc operation will use
; Entry
; BC = Address to read or write from
; Exit
;==================================================================
setdma:    ld   (readdest+1),bc ;Save address into read func
           ret
;==================================================================
; BIOS Func 13 - READ
; Set the address next disc operation will use
; Entry
; Exit
; A = 0 for OK
;     1 for Unrecoverable error
;     FF if media changed.
;==================================================================
read:      ld   a,1
           ld   (DISK_OP),a
           ld   hl,DISK_ROUT
           call call6502
readdest:  ld   de,0000H       ;Setup to copy result back
           ld   hl,0F800H
           ld   bc,0200H
           ldir
           ld   a,(DISK_ERR)   ;Disk read result
           or   a              ;All ok?
           ret  z              ;Go home
           ld   c,7            ;Ring the bell
           call conout
           ld   a,1            ;Flag the error
           ret
;6502 code in page $300
page300:   DB 0A9H,0C3H      ;LDA #$C3
           DB 08DH,000H,010H ;STA $1000
           DB 0A9H,000H      ;LDA #$00
           DB 08DH,001H,010H ;STA $1001
           DB 0A9H,011H      ;LDA #$11
           DB 08DH,002H,010H ;STA $1002
           DB 04CH,0C0H,003H ;JMP $03C0
;Z80 screen locations probably used for scrolling
z80scrn1:  DW 0F400H,0F480H,0F500H,0F580H ;Lines  1, 2, 3, 4
           DW 0F600H,0F680H,0F700H,0F780H ;Lines  5, 6, 7, 8
           DW 0F428H,0F4A8H,0F528H,0F5A8H ;Lines  9,10,11,12
           DW 0F628H,0F6A8H,0F728H,0F7A8H ;Lines 13,14,15,16
           DW 0F450H,0F4D0H,0F550H,0F5D0H ;Lines 17,18,19,20
           DW 0F650H,0F6D0H,0F750H,0F7D0H ;Lines 21,22,23,24
           DW 0
z80scrn2:  DW 0F7D0H,0F750H,0F6D0H,0F650H ;Lines 24,23,22,21
           DW 0F5D0H,0F550H,0F4D0H,0F450H ;Lines 20,19,18,17
           DW 0F7A8H,0F728H,0F6A8H,0F628H ;Lines 16,15,14,13
           DW 0F5A8H,0F528H,0F4A8H,0F428H ;Lines 12,11,10, 9
           DW 0F780H,0F700H,0F680H,0F600H ;Lines  8, 7, 6, 5
           DW 0F580H,0F500H,0F480H,0F400H ;Lines  4, 3, 2, 1
           DW 00
;=================================================
; BIOS Func 11 - SETSEC
; Set the sector next disc operation will use
; Size is from the DPH
; Entry
; BC = Sector number
; Exit
;==================================================================
setsec:    ld   a,c
           ld   (DISK_SECT),a
           ret
;==================================================================
; BIOS Func 25 - MOVE
; Copy memory (sadly wrong order for Z80)
; Entry
; BC = Number of bytes to move
; DE = Source address
; HL = Dest addresss
; Exit
;==================================================================
move:      ex   de,hl
           ldir
           ex   de,hl
           ret
; No idea $380
           DB 000H,000H,002H,010H
           DB 001H,001H,000H,000H
           DB 000H,000H
; 6502 code at $38a
           DB 0A5H,048H        ; LDA FLAG_6502
           DB 048H             ; PHA
           DB 0A5H,045H        ; LDA ACC_6502
           DB 0A6H,046H        ; LDX X_6502
           DB 0A4H,047H        ; LDY Y_6502
           DB 028H             ; PLP
           DB 078H             ; SEI
           DB 060H             ; RTS
; No Idea code at either $0396 or 0F396H
           DB 020H,01BH,0AAH,0D9H,0D4H,0A9H,0A8H,01EH,0BDH,00BH,00CH
           DB 020H,01BH,0AAH,0D9H,0D4H,0A9H,0A8H,01EH,0BDH,00BH,00CH
           DB 080H,000H,000H,000H,000H,000H,000H,000H
           DB 000H,000H,000H,000H
; Could be devices found at $3b8
           DB 002H,000H,000H,004H,000H,000H,000H,000H
; 6502 code at $3C0
; Loop endlessly bouncing between Z80 code
; and whatever 6502 routine we want to run
           DB 02CH,083H,0C0H   ; BIT LCBANK2
           DB 02CH,083H,0C0H   ; BIT LCBANK2
           DB 08DH,000H,0C4H   ; STA $C400
           DB 02CH,081H,0C0H   ; BIT ROMIN
           DB 020H,08AH,003H   ; JSR $38A (save registers)
           DB 020H,000H,000H   ; JSR $0000 (6502 routine to call)
           DB 08DH,081H,0C0H   ; STA ROMIN
           DB 078H             ; SEI
           DB 020H,04AH,0FFH   ; JSR F8ROM:SAVE
           DB 04CH,0C0H,003H   ; JMP $3C0 ; back to Z80
;
; Call into $D400 Disk code in 6502 land
;
           DB 0EAH             ; NOP
           DB 02CH             ; BIT Z80_CARD
Z80_CARD:  DB 001H,0E7H        ; Address of card from Z80 side
           DB 02CH,08BH,0C0H   ; BIT LCBANK1
           DB 02CH,08BH,0C0H   ; BIT LCBANK1
           DB 0D8H             ; CLD
           DB 04CH,000H,0D4H   ; JMP D400
           DB 000H,000H,080H   ; Dunno?
           END
